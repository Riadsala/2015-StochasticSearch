install.packages("lme4")
install.packeges("car")
install.packages("car")
install.packages("Hmci")
install.packages("Hmisc")
install.packages("mnormt")
install.packages("psyhpy")
install.packages("psyphy")
install.packages("plyr")
install.packages("pdyphy")
install.packages("phyphy")
install.packages("psyphy")
q()
install.packages("psyphy")
setInternet2(use = TRUE)
install.packages("psyphy",repos="http://R-Forge.R-project.org", type="source")
install.packages("psyphy")
install.packages("ggplot2")
internet2
install.packages("httr")
capabilities()["libcurl"]
setInternet2(TRUE)
install.packages("httr")
install.packages("swirl", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("nnet", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("ggplot2")
install.packages("ggplot2", dependencies=TRUE)
install.packages("stringr")
2+2
library(ggplot2)
library(ggplot2)#
library(dplyr)#
#
people = 11#c(1,2,3,4,5,11)#
dat = data.frame()#
for (person in people)#
{#
    pdat = rbind(read.csv(paste('../results/', person, 'results.txt', sep='')),read.csv('../results/2results.txt')) #
    dat = rbind(dat, pdat)#
    rm(pdat)#
}#
# tell R that person and targetPresent are categorical factors#
dat$person = as.factor(dat$person)#
dat$targetPresent = as.factor(dat$targetPresent)#
levels(dat$block) = c("coloured", "uncoloured")#
#
# remove response = 3 (timed out?)#
dat = filter(dat, response!=3)#
#
# display number of incorrect trials - should be low!#
print(paste("misses:", 100*nrow(filter(dat, targetPresent==1, response==-1))/nrow(dat)))#
print(paste("false pos:", 100*nrow(filter(dat, targetPresent==0, response==1))/nrow(dat)))#
#
# remove incorrect trials from data#
dat = rbind(filter(dat, targetPresent==1, response==1), filter(dat, targetPresent==0, response==-1))#
#
dat$trialNumber = as.factor(dat$trialNumber)#
dat = filter(dat, block=='coloured')#
#
# dat$responseTime = log(dat$responseTime)#
# compute mean of median and 95% CI#
aggData = (dat #
  %>% group_by(person, block, visualise, trialNumber) #
    %>% summarise(#
     nTrials = length(responseTime),#
     meanRT     = mean(responseTime),#
     medianRT   = median(responseTime), #
     stddev     = sd(responseTime),#
     stderr=stddev/sqrt(nTrials),#
     lower=meanRT-1.96*stderr,#
     upper=meanRT+1.96*stderr))#
#
# plot! #
#
plt = ggplot(aggData, aes(x=trialNumber, y=meanRT, ymin=lower, ymax=upper, colour=visualise, group=visualise))#
plt = plt + geom_path() + geom_errorbar()#
plt = plt + geom_path(aes(y=medianRT), linetype=2)#
plt = plt + facet_wrap(~person, scales='free_y') + theme_bw()#
plt = plt +  scale_colour_brewer(palette="Set1")#
ggsave("pilotResults.pdf", height=4, width=8)#
plt#
# # sample to get CI estimates #
# ii = 0#
# for (n in seq(6,72,6))#
# {#
#     ii = ii + 1#
# sdat = dat[sample(x=nrow(dat), size=n),]#
# m[ii] = mean(sdat$responseTime)#
# stderr[ii] = sd(sdat$responseTime)/sqrt(n)#
#
# }#
# plt = ggplot(data.frame(m = m, n=seq(6,72,6), lower=m-1.96*stderr, upper=m+1.96*stderr), aes(x=n, y=m, ymin=lower, ymax=upper))#
# plt = plt + geom_errorbar() + geom_point() + scale_y_continuous(limits=c(0.3,0.7))#
# plt
install.packages("dplyr")
setwd("Documents/GIT-general-private/2014 StochasticSearch/TextureExpReplication/modelling")
library(dplyr)#
library(ggplot2)#
simdat <- read.table("searchSimResults.txt", header = TRUE,  sep = ",",  stringsAsFactors = FALSE)#
p1 <- ggplot(simdat, aes(y=log(nfix), x=beta, colour=strat)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~ecc)#
names(simdat)[1] = "strategy"#
simdat$strategy = as.factor(simdat$strategy)#
#model <- glm(data=simdat, nfix ~ beta*strat, family="poisson")#
obsdat <- read.table("../analysis/numberFixations.txt", header = TRUE,  sep = ",",  stringsAsFactors = FALSE)#
# combine into one datset#
names(obsdat)[1] = "Observer"#
names(simdat)[1] = "Observer"#
names(simdat)[3] = "nFix"#
# subset multiple factors at once#
# NOTE: subtracting 1 from simulation fixations as human o bservers do not need to fixate target #
# to detect it (while hte model is hard coded to fixate target if it spots it)#
dat <- data.frame(#
    strategy = c(rep("human", length(obsdat$Observer)), simdat$Observer),#
    Observer = c(as.factor(obsdat$Observer), simdat$Observer), #
    beta=c(obsdat$beta, simdat$beta), #
    nFix=c(obsdat$numFix, simdat$nFix))#
#
dat$beta <- factor(as.factor(dat$beta), labels=c("rough", "medium", "smooth"))#
dat$Observer = as.factor(dat$Observer)#
#
levels(dat$strategy) = c("optimal", "stochastic", "human")#
dat$strategy = factor(dat$strategy,levels(dat$strategy)[c(3,2,1)])#
levels(dat$Observer) = seq(1,11)#
dat$Observer[which(dat$strategy=="stochastic")] = 10#
dat$Observer[which(dat$strategy=="optimal")] = 11#
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()#
p2#
ggsave("numFixHumanModel.pdf", width=8, height=5)#
summary(dat)#
humanDat = filter(dat, strategy=='human')#
#
stochasticFix = simdat$nFix[simdat$Observer=="stochastic"]#
optimalFix = simdat$nFix[simdat$Observer=="optimal"]#
t.test(stochasticFix, optimalFix, paired=T, alternative="greater")#
#
 m = glmer(data=filter(dat, strategy!='optimal'), nFix ~ beta * strategy + (1+beta|Observer), family='poisson')#
 summary(m)
setwd("Documents/GIT-general-private/2014 StochasticSearch/TextureExpReplication/modelling")#
library(dplyr)#
library(ggplot2)#
simdat <- read.table("searchSimResults.txt", header = TRUE,  sep = ",",  stringsAsFactors = FALSE)#
p1 <- ggplot(simdat, aes(y=log(nfix), x=beta, colour=strat)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~ecc)#
names(simdat)[1] = "strategy"#
simdat$strategy = as.factor(simdat$strategy)#
#model <- glm(data=simdat, nfix ~ beta*strat, family="poisson")#
obsdat <- read.table("../analysis/numberFixations.txt", header = TRUE,  sep = ",",  stringsAsFactors = FALSE)#
# combine into one datset#
names(obsdat)[1] = "Observer"#
names(simdat)[1] = "Observer"#
names(simdat)[3] = "nFix"#
# subset multiple factors at once#
# NOTE: subtracting 1 from simulation fixations as human o bservers do not need to fixate target #
# to detect it (while hte model is hard coded to fixate target if it spots it)#
dat <- data.frame(#
    strategy = c(rep("human", length(obsdat$Observer)), simdat$Observer),#
    Observer = c(as.factor(obsdat$Observer), simdat$Observer), #
    beta=c(obsdat$beta, simdat$beta), #
    nFix=c(obsdat$numFix, simdat$nFix))#
#
dat$beta <- factor(as.factor(dat$beta), labels=c("rough", "medium", "smooth"))#
dat$Observer = as.factor(dat$Observer)#
#
levels(dat$strategy) = c("optimal", "stochastic", "human")#
dat$strategy = factor(dat$strategy,levels(dat$strategy)[c(3,2,1)])#
levels(dat$Observer) = seq(1,11)#
dat$Observer[which(dat$strategy=="stochastic")] = 10#
dat$Observer[which(dat$strategy=="optimal")] = 11#
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()#
p2#
ggsave("numFixHumanModel.pdf", width=8, height=5)#
summary(dat)#
humanDat = filter(dat, strategy=='human')#
#
stochasticFix = simdat$nFix[simdat$Observer=="stochastic"]#
optimalFix = simdat$nFix[simdat$Observer=="optimal"]#
t.test(stochasticFix, optimalFix, paired=T, alternative="greater")#
#
 m = glmer(data=filter(dat, strategy!='optimal'), nFix ~ beta * strategy + (1+beta|Observer), family='poisson')#
 summary(m)
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set1")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set2")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set3")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set4")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set5")#
p2
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set1")
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set1")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(palette="Set2")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(type="seq", palette="Set2")#
p2
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(type="seq", palette=3)#
p2
setwd("Documents/GIT-general-private/2014 StochasticSearch/TextureExpReplication/modelling")#
library(dplyr)#
library(ggplot2)#
simdat <- read.table("searchSimResults.txt", header = TRUE,  sep = ",",  stringsAsFactors = FALSE)#
p1 <- ggplot(simdat, aes(y=log(nfix), x=beta, colour=strat)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~ecc)#
names(simdat)[1] = "strategy"#
simdat$strategy = as.factor(simdat$strategy)#
#model <- glm(data=simdat, nfix ~ beta*strat, family="poisson")#
obsdat <- read.table("../analysis/numberFixations.txt", header = TRUE,  sep = ",",  stringsAsFactors = FALSE)#
# combine into one datset#
names(obsdat)[1] = "Observer"#
names(simdat)[1] = "Observer"#
names(simdat)[3] = "nFix"#
# subset multiple factors at once#
# NOTE: subtracting 1 from simulation fixations as human o bservers do not need to fixate target #
# to detect it (while hte model is hard coded to fixate target if it spots it)#
dat <- data.frame(#
    strategy = c(rep("human", length(obsdat$Observer)), simdat$Observer),#
    Observer = c(as.factor(obsdat$Observer), simdat$Observer), #
    beta=c(obsdat$beta, simdat$beta), #
    nFix=c(obsdat$numFix, simdat$nFix))#
#
dat$beta <- factor(as.factor(dat$beta), labels=c("rough", "medium", "smooth"))#
dat$Observer = as.factor(dat$Observer)#
#
levels(dat$strategy) = c("optimal", "stochastic", "human")#
dat$strategy = factor(dat$strategy,levels(dat$strategy)[c(3,2,1)])#
levels(dat$Observer) = seq(1,11)#
dat$Observer[which(dat$strategy=="stochastic")] = 10#
dat$Observer[which(dat$strategy=="optimal")] = 11#
p2 <- ggplot(filter(dat, strategy!='optimal'), aes(x=beta, y=nFix, fill=strategy, cond=Observer)) #
p2 <- p2 + geom_boxplot() + scale_y_continuous(name="number of fixations" ,trans = "log2", breaks=c(1,2,4,8,16,32,64,128))+scale_x_discrete(name="target eccentricity (degrees of visual angle)")#
p2 <- p2 + theme_bw()  + scale_fill_brewer(type="seq", palette=3)#
p2#
ggsave("numFixHumanModel.pdf", width=8, height=5)#
summary(dat)#
humanDat = filter(dat, strategy=='human')#
#
stochasticFix = simdat$nFix[simdat$Observer=="stochastic"]#
optimalFix = simdat$nFix[simdat$Observer=="optimal"]#
t.test(stochasticFix, optimalFix, paired=T, alternative="greater")#
#
 m = glmer(data=filter(dat, strategy!='optimal'), nFix ~ beta * strategy + (1+beta|Observer), family='poisson')#
 summary(m)
