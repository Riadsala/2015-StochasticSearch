function AnalysisDataFromRoughnessExperimentFixLocation
clear all
close all
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% .m file to read, process, and display results from Eye tracking
% experiment.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Experiment Information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
numberofParts = 4;
rSet = [100, 225, 350];
RMSSet = [0.9, 1.1];
betaSet = [1.6, 1.65, 1.7];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Participants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
People = {'mk', 'my', 'lm', 'IHH', 'hw', 'am', 'ED'};
numberOfPeople = size(People, 2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Create Empty Arrays to Save Results Into
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PData = creatEmptyResultsStructure;
SaccadeDists = [];
SaccadeAngles = [];
IndvSaccadeAmps = cell(50,1);
IndvSaccadeAmpsByBeta = cell(50,3,2);
IndvSaccadeAmps20 = cell(20,1);


% make a 4x4 cell array for sorting saccades by fixation location
SaccsByPos = cell(4,4);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% For Each Person, Extract Results from Clearview Export Text Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for Pctr = 1:numberOfPeople
    disp(['Now extracting info for person number ' int2str(Pctr)])
    Person = People{Pctr};
    [PData(Pctr).Results] = SortOutEventData(Person, numberofParts);
    for run = 1:numberofParts
        Fixs = getFixesFromTextFile;
        for trialctr = 1:90
            trialnmbr = trialctr+(run-1)*90;
            % for each trial, get fix info
            StartTime = PData(Pctr).Results(trialnmbr, 1);
            EndTime = PData(Pctr).Results(trialnmbr,2);
            Fixations = getFixInfo(Fixs);
            
            PData(Pctr).Results(trialnmbr,9) = Fixations.number;
            [SaccDists, SaccAngles] = GetSaccadeDistsAndAngles;
            SaccadeAngles = [SaccadeAngles, SaccAngles]; %#ok<AGROW>
            SaccadeDists = [SaccadeDists, SaccDists]; %#ok<AGROW>
            % go through each saccade and bin it by fixation location
            for f=1:(Fixations.number-2) %#ok<FXUP>
                [a b] = getBin(Fixations.x(f), Fixations.y(f));
                if (a>0)&&(b>0)
                    SaccsByPos{a,b} = [SaccsByPos{a,b}; [SaccDists(f), SaccAngles(f)]];
                end
            end
        end % end trialctr loop
    end % end run loop
end % end Pctr loop


%%%%%%%%%%%
% now plot saccades stats
%%%%%%%%%%%%%%

[Sx Sy] = pol2cart(SaccadeAngles, SaccadeDists);
figure
S = [Sx;Sy]';
S(isnan(S(:,1)),:)= [];
smoothhist2D(S,1,[150, 150],0.00001);
% show effect of fixation position on saccade statistics
figure('Position',[1 1 1000 1000])
plotctr=0;
for b=1:4
    for a=4:-1:1        
        clear S
        plotctr = plotctr+1;
        subplot(4,4, plotctr)
        S= SaccsByPos{a,b};
        [Sx Sy] = pol2cart(S(:,2), S(:,1));
        S = [Sx Sy];
        S(isnan(S(:,1)),:)= [];
         plot(S(:,1), S(:,2), '.');
        axis([-15 15 -15 15])
        axis equal
        hold all
        plot([-15 15], [0 0], 'k-')
        plot([0 0], [-15 15], 'k-')
%          smoothhist2D(S,1,[15, 15],0.00001);        
    end
end


figure
rose(SaccadeAngles)
figure
plotctr=0;
for b=1:4
    for a=4:-1:1        
        clear S
        plotctr = plotctr+1;
        subplot(4,4, plotctr)
        S= SaccsByPos{a,b};
        rose(S(:,2));   
    end
end

topleftSaccades = SaccsByPos{4,1};
toprightSaccades = SaccsByPos{1,1};
botleftSaccades = SaccsByPos{4,4};
botrightSaccades = SaccsByPos{1,4};

top = SaccsByPosition{2:3,1};
bot =SaccsByPosition{2:3,4};
left = SaccsByPosition{4,2:3}
ri
figure
subplot(3,3,1); rose(topleftSaccades(:,2));
subplot(3,3,3); rose(toprightSaccades(:,2));
subplot(3,3,7); rose(botleftSaccades(:,2));
subplot(3,3,9); rose(botrightSaccades(:,2));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Below are my nested subfunctions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function [a b] = getBin(x,y)
        a = 0;
        b = 0;
        if (x>0)&&(x<=256)
            a=1;
        elseif (x>256)&&(x<=512)
            a=2;
        elseif (x>512)&&(x<=768)
            a=3;
        elseif (x>768)&&(x<=1024)
            a=4;
        end
        if (y>0)&&(y<=256)
            b=1;
        elseif (y>256)&&(y<=512)
            b=2;
        elseif (y>512)&&(y<=768)
            b=3;
        elseif(y>768)&&(y<=1024)
            b=4;
        end
    end

    function Fixs = getFixesFromTextFile
        FixFile = fopen([Person int2str(run) 'FXD.txt']);
        data = fscanf(FixFile, '%c',inf);
        fclose(FixFile); clear FixFile
        %%% delete header
        cursor = regexp(data, 'Fix number', 'once');
        data(1:(cursor-1)) = [];
        cursor = regexp(data, '1', 'once');
        data(1:(cursor-1)) = [];
        % convert to matrix
        Fixs = str2num(data); %#ok<ST2NM>
    end

    function  Fixations = getFixInfo(Fixs)
        FinalFixMinDuration = 200;
        %define offset to turn Clearview output coords to screen coords.
        xoffset = (1200-1024)/2; yoffset = (1600-1024)/2;
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Note: I am including the final fixation on the fixation cross as
        % a trial data point... Otherwise I have no data for my first
        % saccade!
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        index= find((Fixs(:,2)<=EndTime).*(Fixs(:,2)>=StartTime));
        if size(index,1)>0
            % sort out initial fixation, which probably started
            % before the onset of the stimulus. We will consider the time
            % from stimulus onset to end of fixation as a fixation. Unless
            % it lasts shorter than 200ms.
            if index(1)>1
                index = [index(1)-1; index];
            end
            CroppedInitFixLength = Fixs(index(1),2)+Fixs(index(1),3)-StartTime;
            if CroppedInitFixLength<200
                index(1) = [];
            end
            % now sort out final fixation. Only count if participant
            % fixates for at least 200ms before hitting button.
            TimeBetweenFinalFixAndButtonPress = EndTime- Fixs(index(size(index,1)),2);
            if  TimeBetweenFinalFixAndButtonPress < FinalFixMinDuration
                index(size(index,1)) = [];
            end
        end
        index= find((Fixs(:,2)<=EndTime).*(Fixs(:,2)>=StartTime));
        if size(index,1)==0
            % if no fixations recorded, assume time very short and there
            % was one fixation at hte fixation cross
            Fixations.number = 1;
        elseif size(index,1)>0
            Fixations.y = 1024-(1200-Fixs(index, 5)-xoffset);
            Fixations.x = Fixs(index, 4)-yoffset;
            Fixations.number= size(index,1);
        else
            % no fixations recorded for trial!!!
            Fixations.number = 0;
        end
    end % Fixations

    function [d theta] = GetSaccadeDistsAndAngles
        d = zeros(1, Fixations.number-1);
        theta = zeros(1, Fixations.number-1);
        for s  = 1:(Fixations.number-1)
            inBoundary = (Fixations.x(s)>0)&&(Fixations.x(s)<1025)...
                &&(Fixations.y(s)>0)&&(Fixations.y(s)<1025)...
                &&(Fixations.x(s+1)>0)&&(Fixations.x(s+1)<1025)...
                &&(Fixations.y(s+1)>0)&&(Fixations.y(s+1)<1025);
            if inBoundary==1
                xdiff = Fixations.x(s)-Fixations.x(s+1);
                ydiff = Fixations.y(s)-Fixations.y(s+1);
                d(s) = PixelsToVisualAngle(sqrt(xdiff^2+ydiff^2));
                if xdiff == 0
                    theta(s) = pi/2;
                elseif xdiff>0
                    theta(s) = atan(ydiff/xdiff);
                elseif xdiff <0
                    theta(s) = pi+atan(ydiff/xdiff);
                end
            else
                d(s)=NaN;
                theta(s)=NaN;
            end
        end
    end % SaccadeInfo
end

function Results = SortOutEventData(Person, numberofParts)
Results = zeros(360,13);
tick=0;
for erun = 1:numberofParts
    filename = [Person int2str(erun) 'EVD.txt'];
    EventFile = fopen(filename);
    data = fscanf(EventFile, '%c',inf);
    fclose(EventFile);
    %%% delete header
    cursor = regexp(data, 'Time', 'once');
    data(1:(cursor-1)) = [];
    N = size(data,2);
    % find fixcross.jpg.
    FixcrossLocations = regexp(data, 'fixcross.jpg');
    n = size(FixcrossLocations, 2);
    pngLocations = regexp(data, 'png');
    % for each fixcross
    % check time for following imageshow event (as it could be a rouge
    % keypress!)
    % then get start and stop time for trial.
    for t = 1:n
        cursor = FixcrossLocations(t);
        cursor = cursor + 13;
        followingevent = regexp(data(cursor:N), 'Keyboard|ShowSlide', 'once', 'match');
        % Catch any keypresses made while the Fixation Cross is
        % being displayed
        while strcmp(followingevent, 'Keyboard')
            cursor=regexp(data(cursor:N), 'Keyboard', 'once')+cursor;
            cursor=regexp(data(cursor+8:N), '[a-zA-Z]', 'once')+cursor;
            followingevent = regexp(data(cursor:N), 'Keyboard|ShowSlide', 'once', 'match');
        end
        if strcmp(followingevent, 'Keyboard')
            disp('bug to fix');
            break
        end
        StartTime = str2double(regexp(data(cursor:N), '[0-9][0-9][0-9][0-9]+', 'once', 'match'));
        Filename = regexp(data(cursor:N), 'RMS[._=\w]*png',  'once', 'match');
        cursor = pngLocations(t)+3;
        EndTime = str2double(regexp(data(cursor:N), '[0-9]*', 'once', 'match'));
        ReactionTime = (EndTime-StartTime)/1000;
        followingevent = regexp(data(cursor:N), 'Keyboard|ShowSlide', 'once', 'match');
        if strcmp(followingevent, 'ShowSlide')
            disp('bug to fix');
            break
        end
        Keypress =   str2double(regexp(data(cursor+10:N), '\s(13|32)\s', 'once', 'match') )  ;
        if Keypress==32
            Found = 1;
        else
            Found = 0;
            tick=tick+1;
        end
        RMS = str2double(regexp(Filename, '(?<=RMS=)(1(\.1)*)|0\.9(?=_)', 'match'));
        beta = str2double(regexp(Filename, '(?<=beta=)1\.[567]*', 'match'));
        seed = str2double(regexp(Filename, '(?<=seed=)[0-9]*', 'match'));
        r = str2double(regexp(Filename, '(?<=r=)[0-9]*', 'match'));
        Results(t+(erun-1)*90,1:8) = [StartTime, EndTime,  r, RMS, beta, seed,  ReactionTime, Found];
    end
end


end

function PData = creatEmptyResultsStructure
PData(1).Results = zeros(360,10);
PData(2).Results = zeros(360,10);
PData(3).Results = zeros(360,10);
PData(4).Results = zeros(360,10);
PData(5).Results = zeros(360,10);
PData(6).Results = zeros(360,10);
PData(7).Results = zeros(360,10);
end



